import { drawAlligator, drawBB, drawEMAIndicator, drawIchimokuIndicator, drawParabolicSAR, drawSMAIndicator, drawZigZagIndicator } from "../utility/drawUtils";
import {
  calculateATRDrawChart,
  calculateMACD,
  calculateRSI,
  drawMACDIndicatorChart,
  drawRSIIndicatorChart,
  drawVortexIndicatorChart,
  calculateADX,
  calculateBBW,
  calculateVortex,
  calculateStochastic,
  calculateROC,
  calculateMomentum,
  calculateBBP,
  drawBBPIndicatorChart,
  calculateAwesomeOscillator,
  drawAwesomeOscillatorIndicator,
  calculateCCI,
  calculateAverageDayRange,
  calculateBalanceOfPower,
  calculateWilliamsR,
  calculateSMA,
  calculateEMA,
  calculateZigZag,
  calculateParabolicSAR,
  calculateBB,
  calculateKeltnerChannels,
  calculateDonchainChannels,
  calculateAlligator,
  calculateEnvelope,
  calculateIchimokuCloud,
  calculateSuperTrend,
  calculateDoubleEMA,
  calculateTripleEMA,
} from "../utility/indicatorsUtil";
export const indicatorConfig = {
  SMA: {
    name: 'SMA',
    color: "#FFA500",
    stroke: 1,
    period: 20,
    label: "Simple Moving Average",
    chartRequired: false,
    getChartData: calculateSMA,
    drawChartFunction: drawSMAIndicator
  },
  EMA: {
    name: 'EMA',
    color: "#FF0000",
    stroke: 1,
    period: 20,
    label: "Expontential Moving Average",
    chartRequired: false,
    getChartData: calculateEMA,
    drawChartFunction: drawEMAIndicator
  },
  ZigZag: {
    name: 'ZigZag',
    color: "#00FF00",
    label: "Zig Zag",
    deviation: 10,
    pivotLegs: 5,
    chartRequired: false,
    getChartData: calculateZigZag,
    drawChartFunction: drawZigZagIndicator
  },
  RSI: {
    name: 'RSI',
    color: "#FFA500",
    stroke: 1,
    period: 14,
    label: "Relative Strength Index",
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateRSI,
  },
  MACD: {
    name: 'MACD',
    color: "#FFA500",
    stroke: 1,
    label: "Moving Average Convergence Divergence",
    fastPeriod: 12,
    slowPeriod: 26,
    signalPeriod: 9,
    chartRequired: true,
    drawChartFunction: drawMACDIndicatorChart,
    getChartData: calculateMACD,
  },
  ParabolicSAR: {
    name: 'ParabolicSAR',
    color: "#FFA500",
    stroke: 2,
    label: "Parabolic SAR",
    acceleration: 0.02,
    maximum: 0.2,
    chartRequired: false,
    drawChartFunction: drawParabolicSAR,
    getChartData: calculateParabolicSAR,
  },
  BB: {
    name: 'BB',
    color: "#FFA500",
    stroke: 1,
    label: "Bollinger Bands",
    period: 20,
    stdDev: 2,
    chartRequired: false,
    drawChartFunction: drawBB,
    getChartData: calculateBB,
  },
  BBW: {
    name: 'BBW',
    color: "#FFA500",
    stroke: 1,
    label: "Bollinger Bands Width",
    period: 20,
    stdDev: 2,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateBBW,
  },
  KeltnerChannels: {
    name: 'KeltnerChannels',
    color: "#FFA500",
    stroke: 2,
    label: "Keltner Channels",
    period: 20,
    multiplier: 2,
    chartRequired: false,
    drawChartFunction: drawBB,
    getChartData: calculateKeltnerChannels,
  },
  DonchainChannels: {
    name: 'DonchainChannels',
    color: "#FFA500",
    stroke: 2,
    label: "Donchain Channels",
    period: 20,
    chartRequired: false,
    drawChartFunction: drawBB,
    getChartData: calculateDonchainChannels,
  },
  ATR: {
    name: 'ATR',
    color: "#FFA500",
    stroke: 1,
    label: "Average True Range",
    period: 20,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateATRDrawChart,
  },
  ADX: {
    name: 'ADX',
    color: "#FFA500",
    stroke: 1,
    label: "Average Directional Index",
    period: 20,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateADX,
  },
  Vortex: {
    name: 'Vortex',
    color: "#FFA500",
    stroke: 1,
    label: "Vortex",
    period: 12,
    chartRequired: true,
    drawChartFunction: drawVortexIndicatorChart,
    getChartData: calculateVortex,
  },
  Alligator: {
    name: 'Alligator',
    color: "#FFA500",
    stroke: 1,
    label: "Williams Alligator",
    jawPeriod: 13,
    teethPeriod: 8,
    lipsPeriod: 5,
    chartRequired: false,
    drawChartFunction: drawAlligator,
    getChartData: calculateAlligator,
  },
  Stochaistic: {
    name: 'Stochaistic',
    color: "#FFA500",
    stroke: 1,
    label: "Stochaistic Oscillator",
    period: 14,
    smoothPeriod: 1,
    signalPeriod: 3,
    chartRequired: true,
    drawChartFunction: drawVortexIndicatorChart,
    getChartData: calculateStochastic,
  },
  ROC: {
    name: 'ROC',
    color: "#FFA500",
    stroke: 1,
    label: "Rate of Change",
    period: 20,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateROC,
  },
  Momentum: {
    name: 'Momentum',
    color: "#FFA500",
    stroke: 1,
    label: "Momentum",
    period: 20,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateMomentum,
  },
  BBP: {
    name: 'BBP',
    color: "#FFA500",
    stroke: 1,
    label: "Bull Bear Power",
    period: 12,
    chartRequired: true,
    drawChartFunction: drawBBPIndicatorChart,
    getChartData: calculateBBP,
  },
  Envelope: {
    name: 'Envelope',
    color: "#FFA500",
    stroke: 1,
    label: "Envelope",
    period: 20,
    percentage: 10,
    chartRequired: false,
    drawChartFunction: drawBB,
    getChartData: calculateEnvelope,
  },
  AwesomeOscillator: {
    name: 'AwesomeOscillator',
    color: "#FFA500",
    stroke: 1,
    label: "Awesome Oscillator",
    chartRequired: true,
    drawChartFunction: drawAwesomeOscillatorIndicator,
    getChartData: calculateAwesomeOscillator,
  },
  IchimokuCloud: {
    name: 'IchimokuCloud',
    color: "#FFA500",
    stroke: 1,
    label: "Ichimoku Cloud",
    conversionPeriod: 9,
    basePeriod: 26,
    spanBPeriod: 52,
    laggingSpanPeriod: 26,
    chartRequired: false,
    drawChartFunction: drawIchimokuIndicator,
    getChartData: calculateIchimokuCloud,
  },
  CCI: {
    name: 'CCI',
    color: "#FFA500",
    stroke: 1,
    label: "Commodity Channel Index",
    period: 20,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateCCI,
  },
  SuperTrend: {
    name: 'SuperTrend',
    color: "#FFA500",
    stroke: 1,
    label: "Super Trend",
    period: 10,
    multiplier: 3,
    chartRequired: false,
    drawChartFunction: calculateSuperTrend,
    getChartData: calculateSuperTrend,
  },
  AverageDayRange: {
    name: 'AverageDayRange',
    color: "#FFA500",
    stroke: 1,
    label: "Average Day Range",
    period: 14,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateAverageDayRange,
  },
  BalanceOfPower: {
    name: 'BalanceOfPower',
    color: "#FFA500",
    stroke: 1,
    label: "Balance of Power",
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateBalanceOfPower,
  },
  WilliamsR: {
    name: 'WilliamsR',
    color: "#FFA500",
    stroke: 1,
    label: "Williams %R",
    period: 14,
    chartRequired: true,
    drawChartFunction: drawRSIIndicatorChart,
    getChartData: calculateWilliamsR,
  },
  DoubleEMA: {
    name: 'DoubleEMA',
    color: "#FFA500",
    stroke: 1,
    period: 9,
    label: "Double Exponential Moving Average",
    chartRequired: false,
    drawChartFunction: drawEMAIndicator,
    getChartData: calculateDoubleEMA,
  },
  TripleEMA: {
    name: 'TripleEMA',
    color: "#FFA500",
    stroke: 1,
    period: 9,
    label: "Triple Exponential Moving Average",
    chartRequired: false,
    drawChartFunction: drawEMAIndicator,
    getChartData: calculateTripleEMA,
  },
};
